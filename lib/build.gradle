/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // Since this is just a plugin, it's purely a compile time dependency, correct? 
    // I certainly appreciate how this reduces the verbosity of the codebase by generating getters/setters, it's pretty slick...
    id "io.freefair.lombok" version "6.4.3"
    id 'pmd'
    id 'maven-publish'
    id 'signing'
}

pmd {
    pmdTest.enabled = false
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // dependency comments below are appreciated! I wish I could add similar to package.json :(

    implementation 'org.slf4j:slf4j-log4j12:1.7.29'
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:4+'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    archiveBaseName = 'openfeature'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}


jar.archiveBaseName = 'openfeature'

def repo_url = System.getenv("REPOSITORY_URL")

group = 'dev.openfeature'
version = '0.0.1' + (Boolean.valueOf(System.getProperty("release")) ? "" : "-SNAPSHOT")

publishing {
    publications {
        maven(MavenPublication) {
            artifactId="javasdk"
            from components.java

            artifact sourcesJar

            pom {
                name = 'OpenFeature SDK'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description 'A library to abstract feature flagging across many providers'
                url = 'https://openfeature.dev'

                scm {
                    connection = 'scm:git:https://github.com/openfeature/java-sdk.git'
                    developerConnection = 'scm:git:https://github.com/openfeature/java-sdk.git'
                    url = 'https://github.com/openfeature/java-sdk'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'abrahms'
                        name = 'Justin Abrahms'
                        email = 'jabrahms@ebay.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = project.findProperty('ossrhUsername') ?: 'anon'
                password = project.findProperty('ossrhPassword') ?: 'no-op'
            }

            url = repo_url
        }
    }
}